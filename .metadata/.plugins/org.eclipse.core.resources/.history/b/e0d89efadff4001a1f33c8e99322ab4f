package com.practice.encryption.serviceImpl;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.spec.EncodedKeySpec;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.practice.encryption.service.Service1;

@Service
public class Service1Impl implements Service1 {

	private KeyPairGenerator keyPairGenerator;

	private KeyPair keyPair;

	private PrivateKey privateKey;
//	
	private PublicKey publicKey;
	
	@Autowired
	private StandardPBEStringEncryptor decryptor;
	
	@Value("${ab.encryptedKey}")
	private String encryptedKey;
	
	//not working
	@Override
	public String authenticateUser(String password, String message) {
		System.out.println("IN SERVICE KEY IS : " + password);
		decryptor.setPassword(password);
//		String actualKey = decryptor.decrypt(encryptedKey);
		String actualKey = decryptor.encrypt(password);
		return actualKey;
	}

	//working but not useful as casting of String to Key object is not working
	public void generateKeys() {
		try {
			
			//Creating KeyPair generator object
			this.keyPairGenerator = KeyPairGenerator.getInstance("RSA");
			
			//Initializing the key pair generator
			keyPairGenerator.initialize(512);
			
			//Generate the pair of keys
			this.keyPair = keyPairGenerator.generateKeyPair();
			
			//Getting the private key from the key pair
			this.privateKey = keyPair.getPrivate();
			
			//Getting the public key from the key pair
			this.publicKey = keyPair.getPublic();
			
			System.out.println("private Key : " + this.privateKey);
			//Encoding private key into byte[] to save in file
			byte[] privateKeyGetEncoded = this.privateKey.getEncoded();
			System.out.println("privateKeyGetEncoded : " + this.privateKey.getEncoded());

			System.out.println("public Key : " + this.publicKey);
			//Encoding public key into byte[] to save in file
			byte[] publicKeyGetEncoded = this.publicKey.getEncoded();
			System.out.println("publicKeyGetEncoded : " + publicKeyGetEncoded);

//			/* Convert byte[] to key object */
//			KeyFactory keyFactory = KeyFactory.getInstance("RSA");
//			EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(privateKeyGetEncoded);
//			PrivateKey privateKey2 = keyFactory.generatePrivate(privateKeySpec);
//			System.out.println("privateKey2 : " + privateKey2);

			//Create text file to store PRIVATE key
			File privateKeyStoreFile = null;
			try {
				privateKeyStoreFile = new File("D:\\Programming\\Java\\STS_Workspace\\AsymmetricCryptographyExampleKeyFiles\\privateKeyFile.txt");
				if (privateKeyStoreFile.createNewFile()) {
					System.out.println("file Created : " + privateKeyStoreFile.getName());
				} else {
					System.out.println("file existed : " + privateKeyStoreFile.getName());
				}
			} catch (Exception e) {
				System.out.println("ERROR IN CREATING FILE : privateKeyStoreFile");
				e.printStackTrace();
			}

			//Write private key encoded byte[] in text file
			try {
				FileOutputStream fos = new FileOutputStream(privateKeyStoreFile);
				fos.write(privateKeyGetEncoded);
				fos.close();
			} catch (Exception e) {
				System.out.println("ERROR IN WRITING TO FILE : privateKeyStoreFile");
				e.printStackTrace();
			}

			//Create text file to store PUBLIC key
			File publicKeyStoreFile = null;
			try {
				publicKeyStoreFile = new File("D:\\Programming\\Java\\STS_Workspace\\AsymmetricCryptographyExampleKeyFiles\\publicKeyFile.txt");
				if (publicKeyStoreFile.createNewFile()) {
					System.out.println("file Created : " + publicKeyStoreFile.getName());
				} else {
					System.out.println("file existed : " + publicKeyStoreFile.getName());
				}
			} catch (Exception e) {
				System.out.println("ERROR IN CREATING FILE : publicKeyStoreFile");
			}

			//Write public key encoded byte[] in text file
			try {
				FileOutputStream fos = new FileOutputStream(publicKeyStoreFile);
				fos.write(publicKeyGetEncoded);
				fos.close();
			} catch (Exception e) {
				System.out.println("ERROR IN WRITING TO FILE : publicKeyStoreFile");
				e.printStackTrace();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		String originalMessage1 = new String("hello world message");
		System.out.println("originalMessage1 : "+originalMessage1);
		String encryptedMessageText1 = encryptMessage(originalMessage1);
		System.out.println("encryptedMessageText1 : "+encryptedMessageText1);
		String decryptedMessageText1 = decryptMessage(encryptedMessageText1);
		System.out.println("decryptedMessageText1 : "+decryptedMessageText1);
	}

	//not working
	public String encryptMessage(String message1) {
		
		//Reding file to get public key to encrypt message
		try {
			File keyStoreFile = new File("D:\\Programming\\Java\\STS_Workspace\\AsymmetricCryptographyExampleKeyFiles\\publicKeyFile.txt");
			Scanner scanner = new Scanner(keyStoreFile);
			
			//Reading bytes of public key from file and storing in List<Byte>
			List<Byte> publicKeyBytesList = new ArrayList<>();
			System.out.println("reading bytes of public key from file : ");
			while (scanner.hasNextByte()) {
				byte publicKeyByte = scanner.nextByte();
				System.out.print(publicKeyByte);
				publicKeyBytesList.add(publicKeyByte);
			}
			scanner.close();
			
			//Converting List<Byte> into byte[]
			byte[] publicKeyBytesAr = new byte[publicKeyBytesList.size()];
			int i = 0;
			for (Byte b : publicKeyBytesList) {
				publicKeyBytesAr[i] = b;
				i++;
			}

			//Convert byte[] to key object
			KeyFactory keyFactory = KeyFactory.getInstance("RSA");
			EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(publicKeyBytesAr);
			PublicKey publicKey2 = keyFactory.generatePublic(publicKeySpec);
			System.out.println("public key from publicKeyBytesAr : " + publicKey2);

			
			//Creating a Cipher object
			Cipher cipher = Cipher.getInstance("RSA");
			
			//Initializing a Cipher object
			cipher.init(Cipher.ENCRYPT_MODE, publicKey2);
			
			System.out.println("original message : "+message1);
			
			//Add data to the cipher
			byte[] input = message1.getBytes();
			System.out.println("original message bytes : "+input);
			cipher.update(input);
			
			//encrypting the data
			byte[] cipherText = cipher.doFinal();
			System.out.println("cipherText : "+cipherText);
			String cipherTextString = new String(cipherText, "UTF8");
			
			System.out.println("encrypted text from original message - cipherTextString : ");
			System.out.println(cipherTextString);
			
			return cipherTextString;

		} catch (Exception e) {
			System.out.println(" Error in encryptMessage() : ");
			e.printStackTrace();
			return "ERROR IN ENCRYPTION : " + e.toString();
		}

	}

	//not working
	@Override
	public String decryptMessage(String encryptedMessageText) {
		
		//Reding file to get private key to encrypt message
		try {
			File keyStoreFile = new File("D:\\Programming\\Java\\STS_Workspace\\AsymmetricCryptographyExampleKeyFiles\\privateKeyFile.txt");
			Scanner scanner = new Scanner(keyStoreFile);

			//Reading bytes of private key from file and storing in List<Byte>
			List<Byte> privateKeyBytesList = new ArrayList<>();
			System.out.println("reading bytes of private key from file : ");
			while (scanner.hasNextByte()) {
				byte privateKeyByte = scanner.nextByte();
				System.out.print(privateKeyByte);
				privateKeyBytesList.add(privateKeyByte);
			}
			scanner.close();

			//Converting List<Byte> into byte[]
			byte[] privateKeyBytesAr = new byte[privateKeyBytesList.size()];
			int i = 0;
			for (Byte b : privateKeyBytesList) {
				privateKeyBytesAr[i] = b;
				i++;
			}

			//Convert byte[] to key object
			KeyFactory keyFactory = KeyFactory.getInstance("RSA");
			EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(privateKeyBytesAr);
			PrivateKey privateKey2 = keyFactory.generatePrivate(privateKeySpec);
			System.out.println("private key from privateKeyBytesAr : " + privateKey2);

			//Creating a Cipher object
			Cipher cipher = Cipher.getInstance("RSA");

			
			//Initializing the cipher for decryption
			cipher.init(Cipher.DECRYPT_MODE, privateKey2);
//			cipher.init(Cipher.DECRYPT_MODE, keyPair.getPrivate());
			
			System.out.println("encrypted message : "+encryptedMessageText);
			
			//Add data to the cipher
			byte[] input = encryptedMessageText.getBytes();
			System.out.println("encrypted message bytes : "+input);
			cipher.update(input);
			
			//Decrypting the text
			byte[] decipheredText = cipher.doFinal(input);
			String decipheredTextString = new String(decipheredText);
			
			System.out.println("decrypted text from encrypted message : ");
			System.out.println(decipheredTextString);

			return decipheredTextString;

		} catch (Exception e) {
			System.out.println("Error in decryptMessage() : ");
			e.printStackTrace();
			return "ERROR IN DECRYPTION : " + e.toString();
		}

	}

	//Using password and iv based encryption
	@Override
	public String encryptMessageStoreInFile(String password, String fileName, String message) {
		
		// Converting String message to byte[]
		byte[] messageBytes = message.getBytes();
		
		//Prepared nonce or initialization vector (iv)
		SecureRandom secureRandom = new SecureRandom();
		//Should be of 12 Bytes
		byte[] iv = new byte[12];
        secureRandom.nextBytes(iv);
        
        //Prepare Key
        SecretKey secretKey = null;
        try {
			secretKey = generateSecretKey(password, iv);
		} catch (NoSuchAlgorithmException | InvalidKeySpecException e1) {
			System.out.println("EXCEPTION IN Prepare Key : ");
			e1.printStackTrace();
		}
		
        //Creating Cipher object
        Cipher cipher = null;
        try {
			cipher = Cipher.getInstance("AES/GCM/NoPadding");
		} catch (NoSuchAlgorithmException | NoSuchPaddingException e1) {
			System.out.println("EXCEPTION IN Creating Cipher object : ");
			e1.printStackTrace();
		}
        
        //Creating Spec object
        GCMParameterSpec parameterSpec = new GCMParameterSpec(128, iv);
        
        //Initializing the cipher for encryption
        try {
			cipher.init(Cipher.ENCRYPT_MODE, secretKey, parameterSpec);
		} catch (InvalidKeyException | InvalidAlgorithmParameterException e) {
			System.out.println("EXCEPTION IN Initializing the cipher for encryption : ");
			e.printStackTrace();
		}
        
        //Encrypt data
        byte [] encryptedData = null;
        try {
			encryptedData = cipher.doFinal(messageBytes);
		} catch (IllegalBlockSizeException | BadPaddingException e) {
			System.out.println("EXCEPTION IN Encrypt data : ");
			e.printStackTrace();
		}
        
        //Concatenate everything and return the final data
        ByteBuffer byteBuffer = ByteBuffer.allocate(4 + iv.length + encryptedData.length);
        byteBuffer.putInt(iv.length);
        byteBuffer.put(iv);
        byteBuffer.put(encryptedData);
        byte[] encryptedDataByteAr = byteBuffer.array();
        
        //Storing encrypted data into file
//        File file = new File("D:\\Programming\\Java\\STS_Workspace\\AsymmetricCryptographyExampleKeyFiles\\encrypted.txt");
        String destPath = "D:\\Programming\\Java\\STS_Workspace\\AsymmetricCryptographyExampleKeyFiles\\"+fileName+"_encrypt.txt";
        try {
			FileOutputStream fos = new FileOutputStream(destPath);
			fos.write(encryptedDataByteAr);
			fos.close();
		} catch (IOException e) {
			System.out.println("EXCEPTION IN Storing encrypted data into file : ");
			e.printStackTrace();
		}
        return destPath;
        
	}
	
	//Using password and iv based decryption
	@Override
	public String decryptFile(String password, String fileName) {
		
		//Reading file and extract data into byte[]
		String sourcePath = "D:\\Programming\\Java\\STS_Workspace\\AsymmetricCryptographyExampleKeyFiles\\"+fileName+"_encrypt.txt";
		File file = new File(sourcePath);

        byte [] encryptedData = new byte[(int) file.length()];

        try(FileInputStream fileInputStream = new FileInputStream(file)) {
            fileInputStream.read(encryptedData);
        } catch (IOException e) {
        	
			e.printStackTrace();
		}
        
        //Wrap the data into a byte buffer to ease the reading process
        ByteBuffer byteBuffer = ByteBuffer.wrap(encryptedData);
        
        //Get iv size
        int noonceSize = byteBuffer.getInt();

        //Make sure that the file was encrypted properly
        if(noonceSize < 12 || noonceSize >= 16) {
            throw new IllegalArgumentException("Nonce size is incorrect or Make sure that the incoming data is an AES encrypted file.");
        }
        byte[] iv = new byte[noonceSize];
        byteBuffer.get(iv);
        
        //Prepare your key using password and iv
        SecretKey secretKey = null;
        try {
			secretKey = generateSecretKey(password, iv);
		} catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
        //get the rest of encrypted data
        byte[] cipherBytes = new byte[byteBuffer.remaining()];
        byteBuffer.get(cipherBytes);
        
        Cipher cipher = null;
        try {
			cipher = Cipher.getInstance("AES/GCM/NoPadding");
		} catch (NoSuchAlgorithmException | NoSuchPaddingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        GCMParameterSpec parameterSpec = new GCMParameterSpec(128, iv);
        
        //Initialize cipher for decryption
        try {
			cipher.init(Cipher.DECRYPT_MODE, secretKey, parameterSpec);
		} catch (InvalidKeyException | InvalidAlgorithmParameterException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
        //Decrypt data
        byte[] decryptedDataByteAr = null;
		try {
			decryptedDataByteAr = cipher.doFinal(cipherBytes);
		} catch (IllegalBlockSizeException | BadPaddingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//Wrire decrypted data into file
		String destPath = "D:\\Programming\\Java\\STS_Workspace\\AsymmetricCryptographyExampleKeyFiles\\"+fileName+"_decrypt.txt";
		try(FileOutputStream fileOutputStream = new FileOutputStream(destPath)) {
            fileOutputStream.write(decryptedDataByteAr);
        } catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
        return destPath;
        
	}
	
	//method to generate key for password and iv based encryption and decryption
	public static SecretKey generateSecretKey(String password, byte [] iv) throws NoSuchAlgorithmException, InvalidKeySpecException {
        KeySpec spec = new PBEKeySpec(password.toCharArray(), iv, 65536, 128); // AES-128
        SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
        byte[] key = secretKeyFactory.generateSecret(spec).getEncoded();
        return new SecretKeySpec(key, "AES");
    }

}
